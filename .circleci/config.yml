version: 2.1

orbs:
  ms-teams: cloudradar-monitoring/ms-teams@0.0.1
  
commands:
  #destroy-environment:
    #description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    #steps:
      #- run:
          #name: Destroy environments
          #when: on_fail
          #command: |
            # Your code here
            #exit 1

  #revert-migrations:
    #description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    #steps:
      #- run:
          #name: Revert migrations
          # Add when this will run
          #command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS = 1
            #if(( $SUCCESS==1 )); 
            #then
            #cd backend
            #npm install 
            #cd backend
            #npm run migrations:revert
              #exit 1
            #fi
            
jobs:
  build:
    executor: docker
    steps:
      - checkout
      - run: command/to/run/your/tests
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
commands:
  report:
    parameters:
      webhook_url:
        description: https://teams.microsoft.com/l/team/19%3adeb409a862a1493c8bc6f2689ecd804a%40thread.tacv2/conversations?groupId=42080d3d-9f50-4346-8308-b8bde12f3189&tenantId=36da45f1-dd2c-4d1f-af13-5abe46b99921.
        type: string
      only_on_fail:
        description: Whether send notification only if previous steps failed
        type: boolean
        default: false
    steps:
      - run:
          name: Prepare Template
          when: always
          command: |
            SHORT_SHA1=`echo -n $CIRCLE_SHA1 | head -c 7`

            if [ `echo "$CIRCLE_REPOSITORY_URL" | grep "^git@github.com"` ]; then
              COMMIT_LINK=\[$SHORT_SHA1\]\(https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1\)
            elif [ `echo "$CIRCLE_REPOSITORY_URL" | grep "^git@bitbucket.org"` ]; then
              COMMIT_LINK=\[$SHORT_SHA1\]\(https://bitbucket.org/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1\)
            else
              >&2 echo unknown version control system: $CIRCLE_REPOSITORY_URL
              fail
            fi

            # Note that the "\<<" in the heredoc declaration is escaped from
            # CircleCI's parameters syntax.
            MS_TEAMS_MSG_TEMPLATE=$(cat \<<END_HEREDOC
            {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeCdocker_jobolor": "__theme_color__",
              "summary": "CircleCI Build Notification",
              "sections": [
                {
                  "activityTitle": "__build_status__: $CIRCLE_PROJECT_REPONAME job [${CIRCLE_JOB} #${CIRCLE_BUILD_NUM}]($CIRCLE_BUILD_URL)",
                  "facts": [
                    {
                      "name": "Git ref",
                      "value": "$CIRCLE_BRANCH $CIRCLE_TAG"
                    },
                    {
                      "name": "Commit",
                      "value": "$COMMIT_LINK"
                    }
                  ],
                  "markdown": true
                }
              ]
            }
            END_HEREDOC
            )
            echo "$MS_TEAMS_MSG_TEMPLATE" > /tmp/ms_teams_message
      - unless:
          condition: << parameters.only_on_fail >>
          steps:
            - run:
                name: Report Build Success
                command: |
                  MSG_PATH=/tmp/ms_teams_success_message
                  sed -e 's/__build_status__/Success/' -e 's/__theme_color__/14a603/' \
                      /tmp/ms_teams_message > $MSG_PATH
                  curl --fail -H "Content-Type: application/json" \
                        --data-binary @$MSG_PATH \
                        << parameters.webhook_url >>
                when: on_success
      - run:
          name: Report Build Failure
          command: |
            MSG_PATH=/tmp/ms_teams_failure_message
            sed -e 's/__build_status__/Failed/' -e 's/__theme_color__/e2091d/' \
                /tmp/ms_teams_message > $MSG_PATH
            curl --fail -H "Content-Type: application/json" \
                  --data-binary @$MSG_PATH \
                  << parameters.webhook_url >>
          when: on_fail          
 jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i            
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend           
             npm i             
             npm run build             
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            npm run test
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
             cd backend
             npm i
             npm run test            
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm i
             npm audit fix --audit-level=critical --force            
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  #deploy-infrastructure:
    #docker:
      # Docker image here that supports AWS CLI
    #steps:
      # Checkout code from git
      #- run:
          #name: Ensure back-end infrastructure exists
          #command: |
            #aws cloudformation deploy \
              #--template-file .circleci/files/backend.yml \
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              #exit 1
      #- run:
          #name: Ensure front-end infrastructure exist
          #command: |
            #aws cloudformation deploy \
              #--template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              #exit 1
      #- run:
          #name: Add back-end ip to ansible inventory
          #command: |
            # Your code here
            #exit 1
      #- persist_to_workspace:
          #root: ~/
          #paths:
            #- project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  #configure-infrastructure:
    #docker:
      # Docker image here that supports Ansible
    #steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      #- run:
          #name: Install dependencies
          #command: |
            # Your code here
            #exit 1
      #- run:
          #name: Configure server
          #command: |
            # Your code here
            #exit 1
      # Here's where you will add some code to rollback on failure      

  #run-migrations:
    #docker:
      # Docker image here that supports NodeJS
    #steps:
      # Checkout code from git
      #- run:
          #name: Run migrations
          #command: |
            # Your code here
            #exit 1
      #- run:
          #name: Send migration results to memstash
          #command: |
            # Your code here
            #exit 1
     # Here's where you will add some code to rollback on failure      

  #deploy-frontend:
    #docker:
      # Docker image here that supports AWS CLI
    #steps:
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Get backend url
          #command: |
            # your code here
            #export API_URL="http://${BACKEND_IP}:3030"
            #echo "${API_URL}"
      #- run:
          #name: Deploy frontend objects
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  #deploy-backend:
    #docker:
      # Docker image here that supports Ansible
    #steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Deploy backend
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #smoke-test:
    #docker:
      # Lightweight Docker image 
    #steps:
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Get backend url
          #command: |
            # your code here
      #- run:
          #name: Backend smoke test.
          #command: |
            # your code here
      #- run:
          #name: Frontend smoke test.
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #cloudfront-update:
    #docker:
      # Docker image here that supports AWS CLI
    #steps:
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Update cloudfront distribution
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

#cleanup:
    #docker:
      # Docker image here
    #steps:
      # Checkout code from git
      #- run:
          #name: Get old stack workflow id
          #command: |
            # your code here
            #export OldWorkflowID="the id here"
            #export STACKS=[] #put the list of stacks here
     # - run:
          #name: Remove old stacks and files
          #command: |
            #if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            #then
              # your code here
            #fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      #- deploy-infrastructure:
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
              #only: [test-feature-branch]
      #- configure-infrastructure:
          #requires: [deploy-infrastructure]
      #- run-migrations:
          #requires: [configure-infrastructure]
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          #requires: [run-migrations]
      #- smoke-test:
          #requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]
